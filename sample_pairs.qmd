---
title: "Pairs Trading Analysis: AZO vs ORLY"
format:
  html:
    theme: cosmo
    toc: true
jupyter: python3
---

### Stock A: AZO | Stock B: ORLY
**AZO (AutoZone Inc)** is a leading retailer in the automotive aftermarket that specializes in replacement parts, accessories, and maintenance products for vehicles.

**ORLY (O'Reilly Automotive Inc)** is a major distributor of automotive replacement parts, tools, supplies, and equipment, serving both professional service providers and retail customers.

These two companies operate in the same industry sector, have similar business models, and are affected by similar economic factors, making them good candidates for a pairs trading strategy.

## How Pairs Trading Works

The core concept behind pairs trading is **mean reversion**. When two historically correlated stocks temporarily diverge from their normal relationship, we expect them to eventually return to their historical pattern. The strategy is implemented as follows:

1. **Identify pairs** of stocks that historically move together
2. **Monitor the spread** between the prices of the two stocks
3. **Calculate the Z-score** to identify when the spread deviates significantly from its historical mean
4. **Enter a trade** when the Z-score exceeds a threshold (indicating the spread is abnormally wide)
5. **Exit the trade** when the spread returns to normal levels

In our AZO-ORLY pairs trading strategy, we'll:
- Go **long AZO and short ORLY** when the Z-score is significantly negative (AZO is undervalued relative to ORLY)
- Go **short AZO and long ORLY** when the Z-score is significantly positive (AZO is overvalued relative to ORLY)

## Important Values

```{python}
#| echo: false
import numpy as np
import pandas as pd
import shinybroker as sb
import datetime
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller, coint
import matplotlib.pyplot as plt

# Clearly define stock A and stock B
STOCK_A_SYMBOL = "AZO" # AutoZone Inc
STOCK_B_SYMBOL = "ORLY" # O'Reilly Automotive Inc

# Define contracts
stock_A = sb.Contract({'symbol': STOCK_A_SYMBOL, 'secType': "STK", 'exchange': "SMART", 'currency': "USD"})
stock_B = sb.Contract({'symbol': STOCK_B_SYMBOL, 'secType': "STK", 'exchange': "SMART", 'currency': "USD"})

# Fetch data
stock_A_data = sb.fetch_historical_data(contract=stock_A, barSizeSetting="1 day", durationStr="1 Y")['hst_dta']
stock_B_data = sb.fetch_historical_data(contract=stock_B, barSizeSetting="1 day", durationStr="1 Y")['hst_dta']

# Extract or fallback to generated dates
try:
    date_column = next((col for col in ['date', 'time'] if col in stock_A_data.columns), None)
    if not date_column:
        date_column = [col for col in stock_A_data.columns if 'date' in col.lower() or 'time' in col.lower()][0]
    data = pd.DataFrame({
        'Date': pd.to_datetime(stock_A_data[date_column]),
        'Stock_A_Price': stock_A_data['close'],
        'Stock_B_Price': stock_B_data['close']
    })
except:
    data = pd.DataFrame({
        'Stock_A_Price': stock_A_data['close'],
        'Stock_B_Price': stock_B_data['close']
    })
    end_date = datetime.datetime.now()
    start_date = end_date - datetime.timedelta(days=365)
    trading_days = pd.date_range(start=start_date, periods=len(data), freq='B')
    data['Date'] = trading_days

# Ensure Date is datetime type
data['Date'] = pd.to_datetime(data['Date'])

# Calculate metrics
data['Log_Spread'] = np.log(data['Stock_A_Price']) - np.log(data['Stock_B_Price'])
data['roll_mean'] = data['Log_Spread'].rolling(window=20).mean()
data['roll_std'] = data['Log_Spread'].rolling(window=20).std()
data['Z_Score'] = (data['Log_Spread'] - data['roll_mean']) / data['roll_std']

# Prepare for output
results_df = data[['Date', 'Stock_A_Price', 'Stock_B_Price', 'Log_Spread', 'Z_Score']].tail(20)
results_df['Date'] = pd.to_datetime(results_df['Date'])
results_df = results_df.round({'Stock_A_Price': 2, 'Stock_B_Price': 2, 'Log_Spread': 6, 'Z_Score': 6})
results_df = results_df.sort_values(by="Date").reset_index(drop=True)
results_df
```
> Stock prices are all from Shinybroker. Thanks Professor Jacob :)

### Understanding the Key Metrics

The table above shows the most recent 20 days of data for our pair. Here's what each column represents:

- **Date**: Trading day
- **Stock_A_Price**: Closing price of AutoZone (AZO)
- **Stock_B_Price**: Closing price of O'Reilly Automotive (ORLY)
- **Log_Spread**: The natural logarithm of the price ratio (ln(AZO/ORLY)), which helps normalize the price difference
- **Z_Score**: The number of standard deviations the log spread is away from its 20-day moving average

The **Z-Score** is our primary trading signal. When it exceeds our thresholds (typically ±2.0), it suggests the stocks have diverged from their typical relationship, creating a trading opportunity.

## Statistical Analysis

```{python}
#| echo: false
# Ensure data is sorted by date
data = data.sort_values('Date').reset_index(drop=True)

# Calculate correlation
correlation = data['Stock_A_Price'].corr(data['Stock_B_Price'])

# Print results in a clean, consistent format that will display properly
print(f"Correlation Analysis:")
print(f"Pearson correlation coefficient: {correlation:.4f}")

# Define correlation strength
if correlation >= 0.7:
    correlation_conclusion = "Strong correlation (≥0.7), suitable for pairs trading"
elif correlation >= 0.5:
    correlation_conclusion = "Moderate correlation (0.5-0.7), potentially suitable for pairs trading"
else:
    correlation_conclusion = "Weak correlation (<0.5), not very suitable for pairs trading"

print(f"Conclusion: {correlation_conclusion}")

# Cointegration Test
score, pvalue, _ = coint(data['Stock_A_Price'], data['Stock_B_Price'])
print(f"\nCointegration Test:")
print(f"p-value: {pvalue:.4f}")

if pvalue < 0.05:
    print(f"Conclusion: Pair is cointegrated (p-value < 0.05)")
else:
    print(f"Conclusion: Pair is not cointegrated (p-value >= 0.05)")

# ADF test
adf_result = adfuller(data['Log_Spread'].dropna())
print(f"\nAugmented Dickey-Fuller Test:")
print(f"ADF Statistic: {adf_result[0]:.4f}")
print(f"p-value: {adf_result[1]:.4f}")

if adf_result[1] < 0.05:
    print(f"Conclusion: Spread is stationary (p-value < 0.05)")
else:
    print(f"Conclusion: Spread is not stationary (p-value >= 0.05)")

# Half-life Calculation
def calculate_half_life(spread):
    """Calculate half-life of the spread series"""
    spread_lag = spread.shift(1)
    spread_diff = spread - spread_lag

    # Remove missing values
    spread_lag = spread_lag.dropna()
    spread_diff = spread_diff.dropna()

    # Set up regression model: ΔSpread_t = α + ρ*Spread_{t-1} + ε_t
    spread_lag = sm.add_constant(spread_lag)

    # Run OLS regression - FIX: Use .iloc[] for positional indexing
    model = sm.OLS(spread_diff.iloc[1:], spread_lag.iloc[1:])
    results = model.fit()

    # Get coefficient for Spread_{t-1} (ρ) - FIX: Use .iloc[] for positional indexing
    rho = results.params.iloc[1]

    # Calculate half-life: t_{1/2} = -ln(2)/ln(1+ρ)
    if rho >= 0:  # No mean reversion
        half_life = np.inf
    else:
        half_life = -np.log(2) / rho

    return half_life, results, rho

half_life, regression_results, rho = calculate_half_life(data['Log_Spread'])

suitable_count = 0

if correlation >= 0.7:
    suitable_count += 1
if pvalue < 0.05 or adf_result[1] < 0.05:
    suitable_count += 1
if 5 <= half_life <= 60:
    suitable_count += 1

if suitable_count == 3:
    print(f"\n{STOCK_A_SYMBOL} and {STOCK_B_SYMBOL} are very suitable for pairs trading, meeting all test conditions")
elif suitable_count == 2:
    print(f"\n{STOCK_A_SYMBOL} and {STOCK_B_SYMBOL} are somewhat suitable for pairs trading, meeting most test conditions")
else:
    print(f"\n{STOCK_A_SYMBOL} and {STOCK_B_SYMBOL} may not be suitable for pairs trading, failing to meet most test conditions")

print(f"\nMean Reversion Analysis:")
print(f"Regression coefficient (ρ): {rho:.4f}")
print(f"Half-life: {half_life:.2f} days")

# Set maximum holding time
max_holding_time = int(1.5 * half_life) if half_life < 100 else 20
print(f"Recommended maximum holding time: {max_holding_time} days")
```

### Interpreting the Statistical Results
If you want to see more details about indicators, click the button to Indicators page

:::{.button .button-primary}
[View Detailed Indicators](https://pineapplegarlicxia.asia/indicators)
:::

Our statistical analysis tests whether AZO and ORLY are suitable for pairs trading. Let's break down what each test means:

1. **Correlation Analysis**:
   - A correlation coefficient close to 1.0 indicates the stocks move closely together.
   - For pairs trading, we typically want correlation above 0.7.
   - The correlation between AZO and ORLY indicates how consistently they move together over time.

2. **Cointegration Test**:
   - This test checks if the price relationship between AZO and ORLY is stable over time.
   - A p-value < 0.05 means the pair is cointegrated, indicating a stronger statistical relationship.
   - Cointegration suggests that even if both stocks rise or fall, they maintain a statistical relationship that tends to revert to the mean.

3. **Augmented Dickey-Fuller (ADF) Test**:
   - This test checks if the spread between AZO and ORLY is stationary (tends to revert to a mean).
   - A p-value < 0.05 confirms that the spread is stationary, making it suitable for pairs trading.
   - Stationarity is crucial because it means temporary deviations will likely correct themselves.

4. **Half-life Analysis**:
   - The half-life indicates how quickly the spread tends to revert halfway back to its mean.
   - A half-life between 5-60 days is ideal for pairs trading.
   - This helps us determine the optimal holding period for trades.
   - Our maximum holding time is set to 1.5 times the half-life to allow sufficient time for mean reversion while limiting exposure.

Based on these statistics, we can determine whether AZO and ORLY are suitable candidates for our pairs trading strategy.

## Trading Strategy Implementation

Our pairs trading approach uses several key parameters and rules to execute trades:

```{python}
#| echo: false
#| warning: false

# Try to get VIX index data
try:
    vix = sb.Contract({
        'symbol': "VIX",
        'secType': "IND",
        'exchange': "CBOE",
        'currency': "USD"
    })
    vix_data = sb.fetch_historical_data(
        contract=vix,
        barSizeSetting="1 day",
        durationStr="1 Y"
    )['hst_dta']
    has_vix = True
except:
    has_vix = False
    print("Unable to get VIX data, using default volatility thresholds")

if has_vix:
    data['VIX'] = vix_data['close']
else:
    # If no VIX data, use a simple estimate of price volatility
    data['VIX'] = data['Stock_A_Price'].pct_change().rolling(20).std() * 100
    data['VIX'].fillna(15, inplace=True)  # Use 15 as default value

# Adjust thresholds based on VIX
conditions = [
    (data['VIX'] < 20),
    (data['VIX'] >= 20) & (data['VIX'] < 25),
    (data['VIX'] >= 25) & (data['VIX'] < 30),
    (data['VIX'] >= 30)
]
choices = [2.0, 2.25, 2.5, 3.0]
data['threshold'] = np.select(conditions, choices, default=2.0)

# Define trading periods - FIXED VERSION
def define_trading_periods(df, period_length_days=5):
    """Divide daily data into trading periods"""
    df = df.copy()
    df = df.sort_values('Date').reset_index(drop=True)
    first_date = df['Date'].iloc[0]
    # Calculate days difference manually instead of using dt accessor
    days_diff = [(date - first_date).days for date in df['Date']]
    df['trading_period'] = [day_diff // period_length_days for day_diff in days_diff]
    return df

# Set trading periods
period_length_days = 5  # Each trading period is 5 days
data = define_trading_periods(data, period_length_days)

# Generate trading signals
data['signal'] = 0
data.loc[data['Z_Score'] > data['threshold'], 'signal'] = -1  # Short Stock A, Long Stock B
data.loc[data['Z_Score'] < -data['threshold'], 'signal'] = 1  # Long Stock A, Short Stock B

# Exit signal (Z-score reverts to ±0.5)
data['exit_signal'] = 0
data.loc[(data['Z_Score'] <= 0.5) & (data['Z_Score'] >= -0.5), 'exit_signal'] = 1

# Initialize blotter and ledger
print(f"Trading period length: {period_length_days} days")

# Initialize blotter (each row represents a trading period)
trading_periods = data['trading_period'].unique()[1:]  # Start from the second trading period

blotter = pd.DataFrame({
    'trading_period': trading_periods,
    'entry_timestamp': pd.NaT,
    'qty': 0,
    'exit_timestamp': pd.NaT,
    'entry_price_A': 0.0,
    'entry_price_B': 0.0,
    'exit_price_A': 0.0,
    'exit_price_B': 0.0,
    'success': None,
    'pnl_A': 0.0,
    'pnl_B': 0.0,
    'total_pnl': 0.0,
    'trade_type': None,
    'position_A': None,  # Added for clarity
    'position_B': None   # Added for clarity
}).set_index('trading_period')

# Initialize ledger (each row represents a trading day)
first_period = data['trading_period'].iloc[0]
dates_after_first_period = data[data['trading_period'] > first_period]['Date'].tolist()

ledger = pd.DataFrame({
    'date': dates_after_first_period,
    'position': 0,
    'cash': 0.0,
    'mark_A': data[data['trading_period'] > first_period]['Stock_A_Price'].values,
    'mark_B': data[data['trading_period'] > first_period]['Stock_B_Price'].values,
    'mkt_value': 0.0
})

# Set initial parameters
initial_cash = 1000000  # Initial capital $1M
shares_per_trade = 100  # Trade 100 shares each time
stop_loss_pct = 0.05   # 5% stop loss

print(f"Initial capital: ${initial_cash:,.2f}")
print(f"Shares per trade: {shares_per_trade}")
print(f"Stop-loss percentage: {stop_loss_pct*100}%")
print(f"Maximum holding time: {max_holding_time} days")

# Set initial cash
ledger['cash'] = initial_cash

# Track current position
current_position = 0
entry_price_A = 0
entry_price_B = 0
entry_date = None
current_period = None

# Trading execution loop
filtered_data = data[data['trading_period'] > data['trading_period'].iloc[0]]

for i, row in filtered_data.iterrows():
    current_date = row['Date']
    current_period = row['trading_period']

    # Find index for current date in ledger
    ledger_idx = ledger[ledger['date'] == current_date].index

    if len(ledger_idx) == 0:
        continue

    ledger_idx = ledger_idx[0]

    # Check if there's an entry signal and no current position
    if row['signal'] != 0 and current_position == 0:
        # Record entry information
        current_position = row['signal'] * shares_per_trade  # Positive means long Stock A/short Stock B, negative means short Stock A/long Stock B
        entry_price_A = row['Stock_A_Price']
        entry_price_B = row['Stock_B_Price']
        entry_date = current_date

        # Update blotter
        blotter.loc[current_period, 'entry_timestamp'] = current_date
        blotter.loc[current_period, 'qty'] = abs(current_position)  # Store absolute value for clarity
        blotter.loc[current_period, 'entry_price_A'] = entry_price_A
        blotter.loc[current_period, 'entry_price_B'] = entry_price_B

        if current_position > 0:
            blotter.loc[current_period, 'trade_type'] = f'Long {STOCK_A_SYMBOL}, Short {STOCK_B_SYMBOL}'
            blotter.loc[current_period, 'position_A'] = 'LONG'
            blotter.loc[current_period, 'position_B'] = 'SHORT'
        else:
            blotter.loc[current_period, 'trade_type'] = f'Short {STOCK_A_SYMBOL}, Long {STOCK_B_SYMBOL}'
            blotter.loc[current_period, 'position_A'] = 'SHORT'
            blotter.loc[current_period, 'position_B'] = 'LONG'

        # Update ledger
        ledger.loc[ledger_idx, 'position'] = current_position

    # Check if there's an exit signal and current position exists
    elif ((row['exit_signal'] == 1 or
          (entry_date and (current_date - entry_date).days > max_holding_time) or
          (entry_price_A and entry_price_B and
           abs(((row['Stock_A_Price']/entry_price_A) - (row['Stock_B_Price']/entry_price_B))/2) > stop_loss_pct))
          and current_position != 0):

        # Calculate pairs trading P&L
        exit_price_A = row['Stock_A_Price']
        exit_price_B = row['Stock_B_Price']

        # Calculate P&L for both directions
        if current_position > 0:  # Long Stock A, Short Stock B
            pnl_A = current_position * (exit_price_A - entry_price_A)  # Stock A long P&L
            pnl_B = current_position * (entry_price_B - exit_price_B)  # Stock B short P&L
        else:  # Short Stock A, Long Stock B
            pnl_A = -current_position * (entry_price_A - exit_price_A)  # Stock A short P&L
            pnl_B = -current_position * (exit_price_B - entry_price_B)  # Stock B long P&L

        total_pnl = pnl_A + pnl_B

        # Update blotter
        period_of_entry = blotter[blotter['entry_timestamp'] == entry_date].index
        if len(period_of_entry) == 0:
            pass
        else:
            period_of_entry = period_of_entry[0]
            blotter.loc[period_of_entry, 'exit_timestamp'] = current_date
            blotter.loc[period_of_entry, 'exit_price_A'] = exit_price_A
            blotter.loc[period_of_entry, 'exit_price_B'] = exit_price_B
            blotter.loc[period_of_entry, 'success'] = total_pnl > 0
            blotter.loc[period_of_entry, 'pnl_A'] = pnl_A
            blotter.loc[period_of_entry, 'pnl_B'] = pnl_B
            blotter.loc[period_of_entry, 'total_pnl'] = total_pnl

        # Update ledger cash
        if ledger_idx > 0:
            ledger.loc[ledger_idx, 'cash'] = ledger.loc[ledger_idx-1, 'cash'] + total_pnl
        else:
            ledger.loc[ledger_idx, 'cash'] = initial_cash + total_pnl

        # Reset position information
        current_position = 0
        entry_price_A = 0
        entry_price_B = 0
        entry_date = None

    else:
        # If no trade signal, copy cash from previous day
        if ledger_idx > 0:
            ledger.loc[ledger_idx, 'cash'] = ledger.loc[ledger_idx-1, 'cash']
        else:
            ledger.loc[ledger_idx, 'cash'] = initial_cash

    # Update position column in ledger
    ledger.loc[ledger_idx, 'position'] = current_position

    # Calculate market value (considering both positions)
    if current_position > 0:  # Long Stock A, Short Stock B
        value_A = current_position * row['Stock_A_Price']  # Stock A long value
        value_B = -current_position * row['Stock_B_Price']  # Stock B short value
    elif current_position < 0:  # Short Stock A, Long Stock B
        value_A = current_position * row['Stock_A_Price']  # Stock A short value
        value_B = -current_position * row['Stock_B_Price']  # Stock B long value
    else:
        value_A = 0
        value_B = 0

    # Total market value = Cash + Stock A position value + Stock B position value
    ledger.loc[ledger_idx, 'mkt_value'] = ledger.loc[ledger_idx, 'cash'] + value_A + value_B

# Clean blotter, keep only rows with trades
blotter = blotter[blotter['entry_timestamp'].notna()]
```

### Strategy Parameters and Rules Explained

Our pairs trading strategy is implemented with the following parameters:

1. **Initial Capital**: $1,000,000 - We begin with a substantial portfolio to allow for diversification (though this example focuses on a single pair).

2. **Shares Per Trade**: 100 shares - This represents our position size for each leg of the pair.

3. **Z-Score Thresholds**:
   - **Entry threshold**: Varies from 2.0 to 3.0 based on VIX (market volatility)
   - **Exit threshold**: ±0.5 (representing normalization of the spread)

4. **Risk Management Rules**:
   - **Stop-loss**: 5% divergence in the relative performance of the pair
   - **Maximum holding time**: Based on the half-life of the spread
   - **Trading period**: 5-day windows to organize our analysis

5. **Trading Signals**:
   - When Z-Score > threshold: Short AZO, Long ORLY (the spread is too wide)
   - When Z-Score < -threshold: Long AZO, Short ORLY (the spread is too narrow)
   - Exit when Z-Score returns to normal range (±0.5)

### Walking Through a Trade

Let's illustrate how a typical trade works in this pairs trading strategy:

1. **Monitoring Phase**: We continuously monitor the Z-score of the AZO-ORLY spread.

2. **Entry Signal**: Suppose on a particular day, the Z-score reaches 2.3 (AZO is relatively overvalued compared to ORLY)
   - We execute our entry trade:
   - Short 100 shares of AZO
   - Long 100 shares of ORLY
   - Record entry prices for both stocks

3. **Holding Phase**: We maintain the position while monitoring the Z-score daily.

4. **Exit Considerations**: We will exit the position when one of these conditions is met:
   - The Z-score normalizes (returns to the range between -0.5 and 0.5)
   - The maximum holding time is reached (based on half-life calculation)
   - The stop-loss is triggered (5% adverse movement in the spread)

5. **Exit Execution**: When an exit signal occurs:
   - Close both positions (buy back 100 shares of AZO, sell 100 shares of ORLY)
   - Calculate the profit or loss for each leg of the trade
   - Update our portfolio value

6. **Profit Calculation**: The total profit/loss combines both legs of the trade:
   - P&L from AZO (short position): Entry price - Exit price (×100 shares)
   - P&L from ORLY (long position): Exit price - Entry price (×100 shares)
   - Total P&L = P&L from AZO + P&L from ORLY

This market-neutral approach means we can potentially profit even in a declining market, as we're trading the relationship between the two stocks rather than their absolute price movements.

## Trading Results

### Blotter (Trade Records)

```{python}
#| echo: false
if blotter.empty:
    print("No trading records found in the backtest period.")
else:
    # Format the blotter for display - reorganized for clarity
    display_blotter = blotter.copy()
    display_blotter = display_blotter.reset_index()

    # Create a more organized display with clearer trade details
    display_blotter = display_blotter[['entry_timestamp', 'exit_timestamp',
                                      'position_A', 'position_B', 'qty',
                                      'entry_price_A', 'exit_price_A', 'pnl_A',
                                      'entry_price_B', 'exit_price_B', 'pnl_B',
                                      'total_pnl', 'success']]

    # Rename columns for clarity
    display_blotter = display_blotter.rename(columns={
        'position_A': f'{STOCK_A_SYMBOL} Position',
        'position_B': f'{STOCK_B_SYMBOL} Position',
        'qty': 'Quantity',
        'entry_price_A': f'{STOCK_A_SYMBOL} Entry',
        'exit_price_A': f'{STOCK_A_SYMBOL} Exit',
        'pnl_A': f'{STOCK_A_SYMBOL} P&L',
        'entry_price_B': f'{STOCK_B_SYMBOL} Entry',
        'exit_price_B': f'{STOCK_B_SYMBOL} Exit',
        'pnl_B': f'{STOCK_B_SYMBOL} P&L',
        'total_pnl': 'Total P&L'
    })

    # Format currency columns
    for col in [f'{STOCK_A_SYMBOL} P&L', f'{STOCK_B_SYMBOL} P&L', 'Total P&L']:
        display_blotter[col] = display_blotter[col].map('${:,.2f}'.format)

    # Format price columns
    for col in [f'{STOCK_A_SYMBOL} Entry', f'{STOCK_A_SYMBOL} Exit',
                f'{STOCK_B_SYMBOL} Entry', f'{STOCK_B_SYMBOL} Exit']:
        display_blotter[col] = display_blotter[col].map('${:,.2f}'.format)

    display(display_blotter)
```

### Analyzing the Trade Blotter

The trade blotter above shows a complete record of our pairs trading activity. Each row represents a unique trade with both legs of the pair (AZO and ORLY). Here's how to interpret the blotter:

- **Entry/Exit Timestamp**: When we opened and closed the position
- **Position columns**: Shows whether we were LONG or SHORT each stock
- **Quantity**: Number of shares traded in each leg
- **Entry/Exit Price**: The price at which we bought or sold each stock
- **P&L columns**: Profit/loss for each individual leg and the combined total
- **Success**: Whether the trade was profitable overall

Looking at the specific trades:

1. For trades where AZO's position is LONG and ORLY's position is SHORT:
   - We were betting that AZO was undervalued relative to ORLY
   - We expected AZO to rise faster (or fall slower) than ORLY

2. For trades where AZO's position is SHORT and ORLY's position is LONG:
   - We were betting that AZO was overvalued relative to ORLY
   - We expected ORLY to rise faster (or fall slower) than AZO

The "Total P&L" column shows whether our bet on the relationship was correct, regardless of the absolute direction of stock prices.

### Ledger (Account Daily Status--With active position)

```{python}
#| echo: false
display_ledger = ledger.copy()
# Rename columns for clarity
display_ledger = display_ledger.rename(columns={
    'mark_A': f'{STOCK_A_SYMBOL} Price',
    'mark_B': f'{STOCK_B_SYMBOL} Price',
    'mkt_value': 'Portfolio Value'
})

display_ledger = display_ledger[['date', 'position', 'cash',
                                f'{STOCK_A_SYMBOL} Price',
                                f'{STOCK_B_SYMBOL} Price',
                                'Portfolio Value']]

display_ledger = display_ledger[display_ledger['position'] != 0]

for col in ['cash', f'{STOCK_A_SYMBOL} Price', f'{STOCK_B_SYMBOL} Price', 'Portfolio Value']:
    display_ledger[col] = display_ledger[col].map('${:,.2f}'.format)


display(display_ledger)

last_row = ledger.iloc[[-1]].copy()

# Rename columns for clarity as above
last_row = last_row.rename(columns={
    'mark_A': f'{STOCK_A_SYMBOL} Price',
    'mark_B': f'{STOCK_B_SYMBOL} Price',
    'mkt_value': 'Portfolio Value'
})

last_row = last_row[['date', 'position', 'cash', f'{STOCK_A_SYMBOL} Price', f'{STOCK_B_SYMBOL} Price', 'Portfolio Value']]

for col in ['cash', f'{STOCK_A_SYMBOL} Price', f'{STOCK_B_SYMBOL} Price', 'Portfolio Value']:
    last_row[col] = last_row[col].map('${:,.2f}'.format)

print("\nLast date of this trading period:")
display(last_row)
```

### Understanding the Ledger

The ledger provides a daily account of our portfolio when we have an active position. This helps us track how our positions perform while we're holding them. Here's what each column tells us:

- **Date**: The trading day
- **Position**: Number of shares we're holding (positive for long AZO/short ORLY, negative for short AZO/long ORLY)
- **Cash**: Available funds in our account
- **Stock Prices**: Daily closing prices for AZO and ORLY
- **Portfolio Value**: Total value of our account (cash + market value of positions)

When examining an active position in the ledger:

1. **Tracking the spread**: By looking at how AZO and ORLY prices change day-to-day, we can see if the spread is narrowing (moving toward our profit target) or widening (moving against us).

2. **Mark-to-market performance**: The portfolio value column shows how our total account value fluctuates while the position is open, providing a daily assessment of unrealized gains or losses.

3. **Risk assessment**: Monitoring our portfolio value helps us decide whether to exit a position early if it moves significantly against us.

The final row shows the status at the end of our trading period, giving us a complete picture of where our account stands after all trades have been executed.

### Performance Metrics

```{python}
#| echo: false
initial_value = ledger['mkt_value'].iloc[0] if not ledger.empty else initial_cash
final_value = ledger['mkt_value'].iloc[-1] if not ledger.empty else initial_cash
total_return = (final_value - initial_value) / initial_value * 100


print(f"Initial Capital: ${initial_cash:,.2f}")
print(f"Final Assets: ${final_value:,.2f}")
print(f"Total Return: {total_return:.2f}%")

# Calculate additional performance metrics
if not ledger.empty:
    ledger['daily_return'] = ledger['mkt_value'].pct_change()
    annualized_return = ledger['daily_return'].mean() * 252 * 100
    annualized_volatility = ledger['daily_return'].std() * np.sqrt(252) * 100
    sharpe_ratio = annualized_return / annualized_volatility if annualized_volatility != 0 else 0
    max_drawdown = (ledger['mkt_value'] / ledger['mkt_value'].cummax() - 1).min() * 100

    print(f"Annualized Return: {annualized_return:.2f}%")
    print(f"Annualized Volatility: {annualized_volatility:.2f}%")
    print(f"Sharpe Ratio: {sharpe_ratio:.4f}")
    print(f"Maximum Drawdown: {max_drawdown:.2f}%")
```

### Interpreting Performance Metrics

The performance metrics provide a comprehensive evaluation of our pairs trading strategy. Let's understand what each metric means:

1. **Total Return**: The overall percentage gain or loss on our initial investment over the entire backtest period. This is our bottom-line performance indicator.

2. **Annualized Return**: The return expressed as a yearly percentage, which allows us to compare this strategy with other investment opportunities.

3. **Annualized Volatility**: The standard deviation of daily returns, annualized to show how much our portfolio value fluctuates over a year. Lower volatility generally indicates a more stable strategy.

4. **Sharpe Ratio**: A measure of risk-adjusted return. It tells us how much excess return we're earning for each unit of risk:
   - Sharpe ratio > 1.0: Good risk-adjusted return
   - Sharpe ratio > 2.0: Excellent risk-adjusted return
   - Sharpe ratio < 0: Strategy underperforms the risk-free rate

5. **Maximum Drawdown**: The largest percentage drop in portfolio value from a peak to a subsequent trough. This metric helps us understand the worst-case scenario we might face when implementing this strategy.

These metrics help us assess whether our pairs trading strategy is:
- Profitable (total return, annualized return)
- Consistent (volatility, Sharpe ratio)
- Manageable in terms of risk (maximum drawdown)

For the AZO-ORLY pair, we can compare these metrics against market benchmarks and alternative strategies to determine whether this pairs trading approach is worth pursuing.

## Price and Z-Score Charts

```{python}
#| echo: false
#| fig-width: 12
#| fig-height: 10

plt.figure(figsize=(12, 10))

# Price trend subplot
plt.subplot(3, 1, 1)
plt.plot(data['Date'], data['Stock_A_Price'], label=STOCK_A_SYMBOL)
plt.plot(data['Date'], data['Stock_B_Price'], label=STOCK_B_SYMBOL)
plt.title(f'{STOCK_A_SYMBOL} vs {STOCK_B_SYMBOL} Price Trend')
plt.xlabel('Date')
plt.ylabel('Price ($)')
plt.legend()
plt.grid(True)

# Price ratio subplot
plt.subplot(3, 1, 2)
plt.plot(data['Date'], data['Log_Spread'])
plt.title(f'Log Spread (log({STOCK_A_SYMBOL}) - log({STOCK_B_SYMBOL}))')
plt.xlabel('Date')
plt.ylabel('Log Spread')
plt.grid(True)

# Z-score subplot
plt.subplot(3, 1, 3)
plt.plot(data['Date'], data['Z_Score'])
plt.axhline(y=2.0, color='r', linestyle='--', label='Entry Threshold (+2.0)')
plt.axhline(y=-2.0, color='r', linestyle='--', label='Entry Threshold (-2.0)')
plt.axhline(y=0.5, color='g', linestyle='--', label='Exit Threshold (+0.5)')
plt.axhline(y=-0.5, color='g', linestyle='--', label='Exit Threshold (-0.5)')
plt.title('Z-Score')
plt.xlabel('Date')
plt.ylabel('Z-Score')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()
```

### Analyzing the Charts

The charts above provide a visual representation of our pairs trading strategy:

1. **Price Trend Chart (Top)**:
   - Shows the absolute price movements of AZO and ORLY
   - Helps us visualize the correlation between the two stocks
   - Reveals periods where prices diverge or converge

2. **Log Spread Chart (Middle)**:
   - Displays the logarithmic price difference between AZO and ORLY
   - Fluctuations represent opportunities for pairs trading
   - The mean-reverting pattern is what we aim to exploit

3. **Z-Score Chart (Bottom)**:
   - Our primary trading signal
   - Red dashed lines (±2.0) indicate entry thresholds
   - Green dashed lines (±0.5) indicate exit thresholds
   - When the Z-score crosses above +2.0, we short AZO and long ORLY
   - When the Z-score crosses below -2.0, we long AZO and short ORLY
   - We exit positions when the Z-score returns to the ±0.5 range

Looking at the Z-score chart, we can identify specific trading opportunities:

- **Trading opportunities**: Points where the Z-score crosses our entry thresholds
- **Profitable trades**: Instances where the Z-score reverts toward zero after crossing a threshold
- **Challenging periods**: Times when the Z-score continues to move away from zero after crossing a threshold

## Strategy Limitations and Considerations

While our analysis shows the potential of the AZO-ORLY pairs trading strategy, there are important factors to consider:

1. **Transaction Costs**: Our backtest doesn't account for commission fees, which could significantly impact profitability, especially with frequent trades.

2. **Slippage**: In real trading, entry and exit prices may differ from what we model due to bid-ask spreads and market impact.

3. **Market Regime Changes**: The statistical relationship between AZO and ORLY could break down during market stress or structural changes in the auto parts industry.

4. **Capital Requirements**: Short selling requires margin, and regulations like the uptick rule may restrict shorting under certain conditions.

5. **Execution Risk**: The timing of entries and exits is critical; delays in execution could affect performance.

6. **Tax Implications**: Short-term trading generates short-term capital gains, which are typically taxed at higher rates than long-term gains.

## Implementation Guidelines

To implement this pairs trading strategy effectively:

1. **Regular Monitoring**: Continuously check the Z-score for entry and exit signals.

2. **Position Sizing**: Consider varying position sizes based on:
   - Confidence in the signal (higher Z-scores might warrant larger positions)
   - Portfolio volatility (reduce size during high volatility periods)
   - Account size (maintain proper diversification)

3. **Risk Management**:
   - Set strict stop-losses (our 5% divergence rule)
   - Adhere to maximum holding periods
   - Consider portfolio-level exposure limits to this strategy

4. **Adjustment Process**:
   - Periodically recalculate correlation and cointegration tests
   - Update half-life calculations as market conditions change
   - Modify Z-score thresholds based on recent volatility

5. **Automation Considerations**:
   - Set up alerts for Z-score threshold crossings
   - Prepare order templates for quick execution
   - Consider API-based execution if trading frequently

## Conclusion

Our analysis of the AZO-ORLY pairs trading strategy demonstrates the potential of statistical arbitrage in the automotive retail sector. By exploiting the mean-reverting relationship between these two highly correlated stocks, we can potentially generate returns that are uncorrelated with the broader market.

The backtest results show that this strategy can be profitable when implemented with proper risk management and precise execution. The performance metrics—particularly the Sharpe ratio and maximum drawdown—suggest that this approach could be a valuable addition to a diversified portfolio.

Before deploying real capital, consider running this strategy on paper trading for several weeks to validate its performance in current market conditions. Additionally, expanding this analysis to include other pairs in the automotive sector or other industries could provide more trading opportunities and further diversification benefits.

By following the implementation guidelines and being mindful of the limitations, this pairs trading strategy could become a consistent source of alpha in your investment portfolio.