# Updated code for results.qmd file
# This fixes the Statistical Analysis section and improves organization

---
title: "Pairs Trading Analysis: AZO vs ORLY"
format:
  html:
    theme: cosmo
    toc: true
jupyter: python3
---

## Pair Trading Signals – AZO vs ORLY

```{python}
#| echo: false
import numpy as np
import pandas as pd
import shinybroker as sb
import datetime
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller, coint
import matplotlib.pyplot as plt

# Clearly define stock A and stock B
STOCK_A_SYMBOL = "AZO" # AutoZone Inc
STOCK_B_SYMBOL = "ORLY" # O'Reilly Automotive Inc

# Define contracts
stock_A = sb.Contract({'symbol': STOCK_A_SYMBOL, 'secType': "STK", 'exchange': "SMART", 'currency': "USD"})
stock_B = sb.Contract({'symbol': STOCK_B_SYMBOL, 'secType': "STK", 'exchange': "SMART", 'currency': "USD"})

# Fetch data
stock_A_data = sb.fetch_historical_data(contract=stock_A, barSizeSetting="1 day", durationStr="1 Y")['hst_dta']
stock_B_data = sb.fetch_historical_data(contract=stock_B, barSizeSetting="1 day", durationStr="1 Y")['hst_dta']

# Extract or fallback to generated dates
try:
    date_column = next((col for col in ['date', 'time'] if col in stock_A_data.columns), None)
    if not date_column:
        date_column = [col for col in stock_A_data.columns if 'date' in col.lower() or 'time' in col.lower()][0]
    data = pd.DataFrame({
        'Date': pd.to_datetime(stock_A_data[date_column]),
        'Stock_A_Price': stock_A_data['close'],
        'Stock_B_Price': stock_B_data['close']
    })
except:
    data = pd.DataFrame({
        'Stock_A_Price': stock_A_data['close'],
        'Stock_B_Price': stock_B_data['close']
    })
    end_date = datetime.datetime.now()
    start_date = end_date - datetime.timedelta(days=365)
    trading_days = pd.date_range(start=start_date, periods=len(data), freq='B')
    data['Date'] = trading_days

# Ensure Date is datetime type
data['Date'] = pd.to_datetime(data['Date'])

# Calculate metrics
data['Log_Spread'] = np.log(data['Stock_A_Price']) - np.log(data['Stock_B_Price'])
data['roll_mean'] = data['Log_Spread'].rolling(window=20).mean()
data['roll_std'] = data['Log_Spread'].rolling(window=20).std()
data['Z_Score'] = (data['Log_Spread'] - data['roll_mean']) / data['roll_std']

# Prepare for output
results_df = data[['Date', 'Stock_A_Price', 'Stock_B_Price', 'Log_Spread', 'Z_Score']].tail(20)
results_df['Date'] = pd.to_datetime(results_df['Date'])
results_df = results_df.round({'Stock_A_Price': 2, 'Stock_B_Price': 2, 'Log_Spread': 6, 'Z_Score': 6})
results_df = results_df.sort_values(by="Date").reset_index(drop=True)
results_df
```

## Statistical Analysis

```{python}
#| echo: false
# Ensure data is sorted by date
data = data.sort_values('Date').reset_index(drop=True)

# Calculate correlation
correlation = data['Stock_A_Price'].corr(data['Stock_B_Price'])

# Print results in a clean, consistent format that will display properly
print(f"Correlation Analysis:")
print(f"Pearson correlation coefficient: {correlation:.4f}")

# Define correlation strength
if correlation >= 0.7:
    correlation_conclusion = "Strong correlation (≥0.7), suitable for pairs trading"
elif correlation >= 0.5:
    correlation_conclusion = "Moderate correlation (0.5-0.7), potentially suitable for pairs trading"
else:
    correlation_conclusion = "Weak correlation (<0.5), not very suitable for pairs trading"

print(f"Conclusion: {correlation_conclusion}")

# Cointegration Test
score, pvalue, _ = coint(data['Stock_A_Price'], data['Stock_B_Price'])
print(f"\nCointegration Test:")
print(f"p-value: {pvalue:.4f}")

if pvalue < 0.05:
    print(f"Conclusion: Pair is cointegrated (p-value < 0.05)")
else:
    print(f"Conclusion: Pair is not cointegrated (p-value >= 0.05)")

# ADF test
adf_result = adfuller(data['Log_Spread'].dropna())
print(f"\nAugmented Dickey-Fuller Test:")
print(f"ADF Statistic: {adf_result[0]:.4f}")
print(f"p-value: {adf_result[1]:.4f}")

if adf_result[1] < 0.05:
    print(f"Conclusion: Spread is stationary (p-value < 0.05)")
else:
    print(f"Conclusion: Spread is not stationary (p-value >= 0.05)")

# Half-life Calculation
def calculate_half_life(spread):
    """Calculate half-life of the spread series"""
    spread_lag = spread.shift(1)
    spread_diff = spread - spread_lag

    # Remove missing values
    spread_lag = spread_lag.dropna()
    spread_diff = spread_diff.dropna()

    # Set up regression model: ΔSpread_t = α + ρ*Spread_{t-1} + ε_t
    spread_lag = sm.add_constant(spread_lag)

    # Run OLS regression
    model = sm.OLS(spread_diff[1:], spread_lag[1:])
    results = model.fit()

    # Get coefficient for Spread_{t-1} (ρ)
    rho = results.params[1]

    # Calculate half-life: t_{1/2} = -ln(2)/ln(1+ρ)
    if rho >= 0:  # No mean reversion
        half_life = np.inf
    else:
        half_life = -np.log(2) / rho

    return half_life, results, rho

half_life, regression_results, rho = calculate_half_life(data['Log_Spread'])

print(f"\nMean Reversion Analysis:")
print(f"Regression coefficient (ρ): {rho:.4f}")
print(f"Half-life: {half_life:.2f} days")

# Set maximum holding time
max_holding_time = int(1.5 * half_life) if half_life < 100 else 20
print(f"Recommended maximum holding time: {max_holding_time} days")
```

## Trading Strategy Implementation

```{python}
#| echo: false
#| warning: false

# Try to get VIX index data
try:
    vix = sb.Contract({
        'symbol': "VIX",
        'secType': "IND",
        'exchange': "CBOE",
        'currency': "USD"
    })
    vix_data = sb.fetch_historical_data(
        contract=vix,
        barSizeSetting="1 day",
        durationStr="1 Y"
    )['hst_dta']
    has_vix = True
except:
    has_vix = False
    print("Unable to get VIX data, using default volatility thresholds")

if has_vix:
    data['VIX'] = vix_data['close']
else:
    # If no VIX data, use a simple estimate of price volatility
    data['VIX'] = data['Stock_A_Price'].pct_change().rolling(20).std() * 100
    data['VIX'].fillna(15, inplace=True)  # Use 15 as default value

# Adjust thresholds based on VIX
conditions = [
    (data['VIX'] < 20),
    (data['VIX'] >= 20) & (data['VIX'] < 25),
    (data['VIX'] >= 25) & (data['VIX'] < 30),
    (data['VIX'] >= 30)
]
choices = [2.0, 2.25, 2.5, 3.0]
data['threshold'] = np.select(conditions, choices, default=2.0)

# Define trading periods - FIXED VERSION
def define_trading_periods(df, period_length_days=5):
    """Divide daily data into trading periods"""
    df = df.copy()
    df = df.sort_values('Date').reset_index(drop=True)
    first_date = df['Date'].iloc[0]
    # Calculate days difference manually instead of using dt accessor
    days_diff = [(date - first_date).days for date in df['Date']]
    df['trading_period'] = [day_diff // period_length_days for day_diff in days_diff]
    return df

# Set trading periods
period_length_days = 5  # Each trading period is 5 days
data = define_trading_periods(data, period_length_days)

# Generate trading signals
data['signal'] = 0
data.loc[data['Z_Score'] > data['threshold'], 'signal'] = -1  # Short Stock A, Long Stock B
data.loc[data['Z_Score'] < -data['threshold'], 'signal'] = 1  # Long Stock A, Short Stock B

# Exit signal (Z-score reverts to ±0.5)
data['exit_signal'] = 0
data.loc[(data['Z_Score'] <= 0.5) & (data['Z_Score'] >= -0.5), 'exit_signal'] = 1

# Initialize blotter and ledger
print(f"Trading period length: {period_length_days} days")

# Initialize blotter (each row represents a trading period)
trading_periods = data['trading_period'].unique()[1:]  # Start from the second trading period
print(f"Number of trading periods: {len(trading_periods)}")

blotter = pd.DataFrame({
    'trading_period': trading_periods,
    'entry_timestamp': pd.NaT,
    'qty': 0,
    'exit_timestamp': pd.NaT,
    'entry_price_A': 0.0,
    'entry_price_B': 0.0,
    'exit_price_A': 0.0,
    'exit_price_B': 0.0,
    'success': None,
    'pnl_A': 0.0,
    'pnl_B': 0.0,
    'total_pnl': 0.0,
    'trade_type': None,
    'position_A': None,  # Added for clarity
    'position_B': None   # Added for clarity
}).set_index('trading_period')

# Initialize ledger (each row represents a trading day)
first_period = data['trading_period'].iloc[0]
dates_after_first_period = data[data['trading_period'] > first_period]['Date'].tolist()

ledger = pd.DataFrame({
    'date': dates_after_first_period,
    'position': 0,
    'cash': 0.0,
    'mark_A': data[data['trading_period'] > first_period]['Stock_A_Price'].values,
    'mark_B': data[data['trading_period'] > first_period]['Stock_B_Price'].values,
    'mkt_value': 0.0
})

print(f"Number of ledger rows: {len(ledger)}")

# Set initial parameters
initial_cash = 1000000  # Initial capital $1M
shares_per_trade = 100  # Trade 100 shares each time
stop_loss_pct = 0.05   # 5% stop loss

print(f"Initial capital: ${initial_cash:,.2f}")
print(f"Shares per trade: {shares_per_trade}")
print(f"Stop-loss percentage: {stop_loss_pct*100}%")
print(f"Maximum holding time: {max_holding_time} days")

# Set initial cash
ledger['cash'] = initial_cash

# Track current position
current_position = 0
entry_price_A = 0
entry_price_B = 0
entry_date = None
current_period = None

# Trading execution loop
filtered_data = data[data['trading_period'] > data['trading_period'].iloc[0]]

for i, row in filtered_data.iterrows():
    current_date = row['Date']
    current_period = row['trading_period']

    # Find index for current date in ledger
    ledger_idx = ledger[ledger['date'] == current_date].index

    if len(ledger_idx) == 0:
        continue

    ledger_idx = ledger_idx[0]

    # Check if there's an entry signal and no current position
    if row['signal'] != 0 and current_position == 0:
        # Record entry information
        current_position = row['signal'] * shares_per_trade  # Positive means long Stock A/short Stock B, negative means short Stock A/long Stock B
        entry_price_A = row['Stock_A_Price']
        entry_price_B = row['Stock_B_Price']
        entry_date = current_date

        # Update blotter
        blotter.loc[current_period, 'entry_timestamp'] = current_date
        blotter.loc[current_period, 'qty'] = abs(current_position)  # Store absolute value for clarity
        blotter.loc[current_period, 'entry_price_A'] = entry_price_A
        blotter.loc[current_period, 'entry_price_B'] = entry_price_B

        if current_position > 0:
            blotter.loc[current_period, 'trade_type'] = f'Long {STOCK_A_SYMBOL}, Short {STOCK_B_SYMBOL}'
            blotter.loc[current_period, 'position_A'] = 'LONG'
            blotter.loc[current_period, 'position_B'] = 'SHORT'
        else:
            blotter.loc[current_period, 'trade_type'] = f'Short {STOCK_A_SYMBOL}, Long {STOCK_B_SYMBOL}'
            blotter.loc[current_period, 'position_A'] = 'SHORT'
            blotter.loc[current_period, 'position_B'] = 'LONG'

        # Update ledger
        ledger.loc[ledger_idx, 'position'] = current_position

    # Check if there's an exit signal and current position exists
    elif ((row['exit_signal'] == 1 or
          (entry_date and (current_date - entry_date).days > max_holding_time) or
          (entry_price_A and entry_price_B and
           abs(((row['Stock_A_Price']/entry_price_A) - (row['Stock_B_Price']/entry_price_B))/2) > stop_loss_pct))
          and current_position != 0):

        # Calculate pairs trading P&L
        exit_price_A = row['Stock_A_Price']
        exit_price_B = row['Stock_B_Price']

        # Calculate P&L for both directions
        if current_position > 0:  # Long Stock A, Short Stock B
            pnl_A = current_position * (exit_price_A - entry_price_A)  # Stock A long P&L
            pnl_B = current_position * (entry_price_B - exit_price_B)  # Stock B short P&L
        else:  # Short Stock A, Long Stock B
            pnl_A = -current_position * (entry_price_A - exit_price_A)  # Stock A short P&L
            pnl_B = -current_position * (exit_price_B - entry_price_B)  # Stock B long P&L

        total_pnl = pnl_A + pnl_B

        # Update blotter
        period_of_entry = blotter[blotter['entry_timestamp'] == entry_date].index
        if len(period_of_entry) == 0:
            pass
        else:
            period_of_entry = period_of_entry[0]
            blotter.loc[period_of_entry, 'exit_timestamp'] = current_date
            blotter.loc[period_of_entry, 'exit_price_A'] = exit_price_A
            blotter.loc[period_of_entry, 'exit_price_B'] = exit_price_B
            blotter.loc[period_of_entry, 'success'] = total_pnl > 0
            blotter.loc[period_of_entry, 'pnl_A'] = pnl_A
            blotter.loc[period_of_entry, 'pnl_B'] = pnl_B
            blotter.loc[period_of_entry, 'total_pnl'] = total_pnl

        # Update ledger cash
        if ledger_idx > 0:
            ledger.loc[ledger_idx, 'cash'] = ledger.loc[ledger_idx-1, 'cash'] + total_pnl
        else:
            ledger.loc[ledger_idx, 'cash'] = initial_cash + total_pnl

        # Reset position information
        current_position = 0
        entry_price_A = 0
        entry_price_B = 0
        entry_date = None

    else:
        # If no trade signal, copy cash from previous day
        if ledger_idx > 0:
            ledger.loc[ledger_idx, 'cash'] = ledger.loc[ledger_idx-1, 'cash']
        else:
            ledger.loc[ledger_idx, 'cash'] = initial_cash

    # Update position column in ledger
    ledger.loc[ledger_idx, 'position'] = current_position

    # Calculate market value (considering both positions)
    if current_position > 0:  # Long Stock A, Short Stock B
        value_A = current_position * row['Stock_A_Price']  # Stock A long value
        value_B = -current_position * row['Stock_B_Price']  # Stock B short value
    elif current_position < 0:  # Short Stock A, Long Stock B
        value_A = current_position * row['Stock_A_Price']  # Stock A short value
        value_B = -current_position * row['Stock_B_Price']  # Stock B long value
    else:
        value_A = 0
        value_B = 0

    # Total market value = Cash + Stock A position value + Stock B position value
    ledger.loc[ledger_idx, 'mkt_value'] = ledger.loc[ledger_idx, 'cash'] + value_A + value_B

# Clean blotter, keep only rows with trades
blotter = blotter[blotter['entry_timestamp'].notna()]
```

## Trading Results

### Blotter (Trade Records)

```{python}
#| echo: false
if blotter.empty:
    print("No trading records found in the backtest period.")
else:
    # Format the blotter for display - reorganized for clarity
    display_blotter = blotter.copy()
    display_blotter = display_blotter.reset_index()

    # Create a more organized display with clearer trade details
    display_blotter = display_blotter[['entry_timestamp', 'exit_timestamp',
                                      'position_A', 'position_B', 'qty',
                                      'entry_price_A', 'exit_price_A', 'pnl_A',
                                      'entry_price_B', 'exit_price_B', 'pnl_B',
                                      'total_pnl', 'success']]

    # Rename columns for clarity
    display_blotter = display_blotter.rename(columns={
        'position_A': f'{STOCK_A_SYMBOL} Position',
        'position_B': f'{STOCK_B_SYMBOL} Position',
        'qty': 'Quantity',
        'entry_price_A': f'{STOCK_A_SYMBOL} Entry',
        'exit_price_A': f'{STOCK_A_SYMBOL} Exit',
        'pnl_A': f'{STOCK_A_SYMBOL} P&L',
        'entry_price_B': f'{STOCK_B_SYMBOL} Entry',
        'exit_price_B': f'{STOCK_B_SYMBOL} Exit',
        'pnl_B': f'{STOCK_B_SYMBOL} P&L',
        'total_pnl': 'Total P&L'
    })

    # Format currency columns
    for col in [f'{STOCK_A_SYMBOL} P&L', f'{STOCK_B_SYMBOL} P&L', 'Total P&L']:
        display_blotter[col] = display_blotter[col].map('${:,.2f}'.format)

    # Format price columns
    for col in [f'{STOCK_A_SYMBOL} Entry', f'{STOCK_A_SYMBOL} Exit',
                f'{STOCK_B_SYMBOL} Entry', f'{STOCK_B_SYMBOL} Exit']:
        display_blotter[col] = display_blotter[col].map('${:,.2f}'.format)

    display(display_blotter)
```

### Ledger (Account Daily Status)

```{python}
#| echo: false
display_ledger = ledger.copy()
# Rename columns for clarity
display_ledger = display_ledger.rename(columns={
    'mark_A': f'{STOCK_A_SYMBOL} Price',
    'mark_B': f'{STOCK_B_SYMBOL} Price',
    'mkt_value': 'Portfolio Value'
})

display_ledger = display_ledger[['date', 'position', 'cash',
                                f'{STOCK_A_SYMBOL} Price',
                                f'{STOCK_B_SYMBOL} Price',
                                'Portfolio Value']]

for col in ['cash', f'{STOCK_A_SYMBOL} Price', f'{STOCK_B_SYMBOL} Price', 'Portfolio Value']:
    display_ledger[col] = display_ledger[col].map('${:,.2f}'.format)

print("Ledger (first 10 rows):")
display(display_ledger.head(10))
```

### Performance Metrics

```{python}
#| echo: false
print("Strategy Performance Metrics:")
initial_value = ledger['mkt_value'].iloc[0] if not ledger.empty else initial_cash
final_value = ledger['mkt_value'].iloc[-1] if not ledger.empty else initial_cash
total_return = (final_value - initial_value) / initial_value * 100

print(f"Initial Capital: ${initial_cash:,.2f}")
print(f"Final Assets: ${final_value:,.2f}")
print(f"Total Return: {total_return:.2f}%")

# Calculate additional performance metrics
if not ledger.empty:
    ledger['daily_return'] = ledger['mkt_value'].pct_change()
    annualized_return = ledger['daily_return'].mean() * 252 * 100
    annualized_volatility = ledger['daily_return'].std() * np.sqrt(252) * 100
    sharpe_ratio = annualized_return / annualized_volatility if annualized_volatility != 0 else 0
    max_drawdown = (ledger['mkt_value'] / ledger['mkt_value'].cummax() - 1).min() * 100

    print(f"Annualized Return: {annualized_return:.2f}%")
    print(f"Annualized Volatility: {annualized_volatility:.2f}%")
    print(f"Sharpe Ratio: {sharpe_ratio:.4f}")
    print(f"Maximum Drawdown: {max_drawdown:.2f}%")
```

## Price and Z-Score Charts

```{python}
#| echo: false
#| fig-width: 12
#| fig-height: 10

plt.figure(figsize=(12, 10))

# Price trend subplot
plt.subplot(3, 1, 1)
plt.plot(data['Date'], data['Stock_A_Price'], label=STOCK_A_SYMBOL)
plt.plot(data['Date'], data['Stock_B_Price'], label=STOCK_B_SYMBOL)
plt.title(f'{STOCK_A_SYMBOL} vs {STOCK_B_SYMBOL} Price Trend')
plt.xlabel('Date')
plt.ylabel('Price ($)')
plt.legend()
plt.grid(True)

# Price ratio subplot
plt.subplot(3, 1, 2)
plt.plot(data['Date'], data['Log_Spread'])
plt.title(f'Log Spread (log({STOCK_A_SYMBOL}) - log({STOCK_B_SYMBOL}))')
plt.xlabel('Date')
plt.ylabel('Log Spread')
plt.grid(True)

# Z-score subplot
plt.subplot(3, 1, 3)
plt.plot(data['Date'], data['Z_Score'])
plt.axhline(y=2.0, color='r', linestyle='--', label='Entry Threshold (+2.0)')
plt.axhline(y=-2.0, color='r', linestyle='--', label='Entry Threshold (-2.0)')
plt.axhline(y=0.5, color='g', linestyle='--', label='Exit Threshold (+0.5)')
plt.axhline(y=-0.5, color='g', linestyle='--', label='Exit Threshold (-0.5)')
plt.title('Z-Score')
plt.xlabel('Date')
plt.ylabel('Z-Score')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()
```